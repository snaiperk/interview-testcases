<?
/*
*** ИСХОДНЫЙ ТЕКСТ ЗАДАНИЯ ***

	Введение
	Есть 36 ячеек (ноль не считаем) и 18 фишек. В одну ячейку можно положить только одну фишку. Пример разложения:
	1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 ... 36
	$ $ $ $ $ $ $ $ $ $  $  $  $  $  $  $  $  $
	Нужно найти и сложить в тестовый файл все возможные варианты таких разложений.

	Задача
	Вход - два целых числа: fieldsCount - количество ячеек, chipCount - количество фишек (нужен какой-то интерфейс). 
	Требуется предоставить все возможные способы расстановки всех фишек по ячейкам. В одну ячейку можно положить только одну фишку.
	Выход - текстовый файл, в первой строке указывающий число вариантов, а далее содержащий все подходящие варианты. 
	Если вариантов менее 10, файл должен содержать только текст "Менее 10 вариантов". 
	Приветствуется самый быстрый и функциональный (протестированный относительно входных данных) вариант.

*** МОЙ КОММЕНТАРИЙ ***
	Задача расстановки фишек является частным случаем Сочетаний. Что ж, тряхнём школьной комбинаторикой!
	Количество сочетаний вычисляется по формуле С(n, k) (Цэ из эн по ка, звучит как-то по украински) = n!/k!(n-k)!
	Есть один занятный алгоритм для вычисления этого биномиального коэффициента...
	Далее идёт перебор самих комбинаций, думаю сделать его рекурсивным
	Сильно извращаться на предмет автоматизации форм не будем, т.к. надо же меру знать-то!
	Итак, поехали!
*/
    // Эмпирически задаём ограничение для входных данных, исходя из возможностей нашего сервера и здравого смысла, 
	const MAX_FIELDS = 36; // Даже при таких небольших количествах ячеек разложений уже получается что-то многовато :(
	require_once("../interface.php");

	// *** Конкретный класс теста ***
	class ChipComposer extends BasicPhpTest implements phpTest{
		private $companyName = "iConText";
		private $fileName = 'ChipComposer.txt';
		private $resultMarker = 'needToCompute';
		
		private function C($n, $k){
			// Не будем проверять типы и пределы здесь, так как функция приватная и кому попало не достанется
			$koef = 1;
			if ($n - $k > $k)
				$k = $n - $k;
			for ($i = $k + 1; $i <= $n; $i++)
				$koef = $koef * $i;
			for ($i = 1; $i < ($n - $k + 1); $i++)
				$koef = $koef / $i;
			return $koef;
		}
		
		private function checkInput($n){
			return (is_int($n) && ($n <= MAX_FIELDS) && ($n > 0));
		}
		
		private function SaveResult(){
		}
		public function computeResults($args){
			$result = 'Подготовка к вычислению';
			$output = '';
			$errlog = '';
			$n = intval($args['fieldsCount']); // Можно, конечно, проверить на существование в запросе, защититься от битого запроса... Но зачем тут?
			$k = intval($args['chipCount']);
			if(!$this->checkInput($n)) $errlog .= 'Ошибка ввода количества ячеек, ожидается число от 1 до '.MAX_FIELDS.", а передано \"$n\"<br />\n";
			if(!$this->checkInput($k)) $errlog .= 'Ошибка ввода количества фишек, ожидается число от 1 до '.MAX_FIELDS.", а передано \"$k\"<br />\n";
			if($n < $k) $errlog .= "Ошибка ввода количества фишек - их больше, чем ячеек! Все не влезут, придётся складывать горкой.<br />\n";
			if($errlog == ''){
				$combinations = $this->C($n, $k);
				$variants = explode(',','ов,,а,а,а,ов,ов,ов,ов,ов');
				$result = 'Имеем '.number_format ( $combinations , 0, '.', ' ' ).' возможны'.($combinations % 10 != 1?'х':'й').' вариант'.$variants[$combinations%10].' расстановки!';
			}
			else{
				$result = "<b>В процессе работы возникли ошибки:</b><br>\n$errlog";
			}
			
			return $result;
		}		
		
		public function getResultMarker() {return $this->resultMarker;}
		public function getCompanyName() {return $this->companyName;}
		public function renderTestForm(){
			// Я решил для начала не разделять полностью отображение и логику, хотя это немножко напрашивается
			$form = "Называется \"Про ячейки и фишки\"<br> <form method='post'>
			Введите количество полей: <input type='number' name='fieldsCount' 	maxlength='3' value='{$this->defaultValue('fieldsCount', 36)}'/><br>
			Введите количество фишек: <input type='number' name='chipCount' 	maxlength='3' value='{$this->defaultValue('chipCount', 18)}'/><br>
			<input type='submit' name='{$this->resultMarker}' value='Вычислить!'/>
			</form>";
			
			return $form;
		}
	}
	//***** НАЧАЛО РАБОТЫ ТУТА *****
	// Создадим экземпляры директора, отвечающего за отображение, и теста, отвечающего за логику теста
	$director = phpTestDirector::getInstance(new ChipComposer());
	// И выведем шаблон на экран. То, что должно было быть посчитано, было посчитано ещё в конструкторе директора.
	$director->render();
?>